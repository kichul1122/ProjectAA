// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace AA.Formatters.AA
{
    public sealed class CharacterMetaDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AA.CharacterMetaData>
    {
        // CharacterId
        private static global::System.ReadOnlySpan<byte> GetSpan_CharacterId() => new byte[1 + 11] { 171, 67, 104, 97, 114, 97, 99, 116, 101, 114, 73, 100 };
        // StatModifiers
        private static global::System.ReadOnlySpan<byte> GetSpan_StatModifiers() => new byte[1 + 13] { 173, 83, 116, 97, 116, 77, 111, 100, 105, 102, 105, 101, 114, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::AA.CharacterMetaData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_CharacterId());
            writer.Write(value.CharacterId);
            writer.WriteRaw(GetSpan_StatModifiers());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AA.StatModifier>>(formatterResolver).Serialize(ref writer, value.StatModifiers, options);
        }

        public global::AA.CharacterMetaData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __CharacterId__ = default(long);
            var __StatModifiers__ = default(global::System.Collections.Generic.List<global::AA.StatModifier>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_CharacterId().Slice(1))) { goto FAIL; }

                        __CharacterId__ = reader.ReadInt64();
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_StatModifiers().Slice(1))) { goto FAIL; }

                        __StatModifiers__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::AA.StatModifier>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::AA.CharacterMetaData(__CharacterId__, __StatModifiers__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
