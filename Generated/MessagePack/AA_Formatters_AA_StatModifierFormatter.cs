// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace AA.Formatters.AA
{
    public sealed class StatModifierFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::AA.StatModifier>
    {
        // EStat
        private static global::System.ReadOnlySpan<byte> GetSpan_EStat() => new byte[1 + 5] { 165, 69, 83, 116, 97, 116 };
        // Value
        private static global::System.ReadOnlySpan<byte> GetSpan_Value() => new byte[1 + 5] { 165, 86, 97, 108, 117, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::AA.StatModifier value, global::MessagePack.MessagePackSerializerOptions options)
        {
            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_EStat());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::AA.EStat>(formatterResolver).Serialize(ref writer, value.EStat, options);
            writer.WriteRaw(GetSpan_Value());
            writer.Write(value.Value);
        }

        public global::AA.StatModifier Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __EStat__ = default(global::AA.EStat);
            var __Value__ = default(double);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 499851219781UL:
                                __EStat__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::AA.EStat>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 435761733974UL:
                                __Value__ = reader.ReadDouble();
                                continue;
                        }

                }
            }

            var ____result = new global::AA.StatModifier(__EStat__, __Value__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
